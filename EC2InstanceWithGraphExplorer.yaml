AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  License: Apache-2.0
Description: "AWS CloudFormation Template EC2InstanceWithDockerSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI and Docker with
  malware-cryptominer-container. The AMI is chosen based on the region in which
  the stack is run."
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge]
    ConstraintDescription: must be a valid "t2" EC2 instance type.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
  PublicSubnetCIDR:
    Default: 10.0.0.0/24
    Description: Please enter the IP range (CIDR notation) for the Public Subnet 1
    Type: String
Resources:
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  rInternetGateway:
    Type: AWS::EC2::InternetGateway

  rAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rInternetGateway

  rPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

  rPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway

  rPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnet
      RouteTableId: !Ref rPublicRouteTable

  rEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rEc2InstanceRole

  rEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  rEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # checkov:skip=CKV_AWS_260:Ensure no security groups allow ingress from 0.0.0.0:0 to port 80
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        # - Description: Incomming HTTP traffic
        #   IpProtocol: tcp
        #   FromPort: "80"
        #   ToPort: "80"
        #   CidrIp: 0.0.0.0/0
        # - Description: Incomming HTTPS traffic
        #   IpProtocol: tcp
        #   FromPort: "443"
        #   ToPort: "443"
        #   CidrIp: 0.0.0.0/0
        - Description: Incomming SSH traffic
          IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        # - Description: Incomming Neptune traffic
        #   IpProtocol: tcp
        #   FromPort: "8182"
        #   ToPort: "8182"
        #   CidrIp: 0.0.0.0/0

  rImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: ruzickap-ImportedKeyPair
      PublicKeyMaterial: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIF58juRs3gDSCFXARSXBBSegOmmBxXln9MVk2Zcq3HGh petr.ruzicka@gmail.com

  rEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref rEc2InstanceProfile
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName:
        Ref: rImportedKeyPair
      SubnetId: !Ref rPublicSubnet
      SecurityGroupIds:
        - !Ref rEc2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: True
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          set -euxo pipefail
          # Install Docker
          sudo yum update -y
          sudo yum install git docker -y
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
          git clone https://github.com/aws/graph-explorer/
          cd graph-explorer
          docker build -t graph-explorer .

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref "rEC2Instance"
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [rEC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [rEC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [rEC2Instance, PublicIp]
  VpcId:
    Description: VPC Id
    Value: !Ref rVPC
  PublicSubnetId:
    Description: Public Subnet Id
    Value: !Ref rPublicSubnet
